// This is the minified and stringified code of the json-midi-encoder-worker package.
export const worker = `(()=>{"use strict";const e=e=>{const t=new ArrayBuffer(e);return{arrayBuffer:t,dataView:new DataView(t)}},t=e=>{const t=new ArrayBuffer(e);return{arrayBuffer:t,dataView:new DataView(t)}},r=e=>{const t=e.reduce(((e,t)=>e+t.byteLength),0),[,r]=e.reduce(((e,t)=>{let[r,n]=e;return n.set(new Uint8Array(t),r),[r+t.byteLength,n]}),[0,new Uint8Array(t)]);return r.buffer},n=(e=>t=>{const r=Math.max(1,Math.floor(Math.log(t)/Math.log(2)/7)+1),{arrayBuffer:n,dataView:i}=e(r);for(let e=1;e<r;e+=1)i.setUint8(r-1-e,t>>7*e&127|128);return i.setUint8(r-1,127&t),n})(t),i=((e,t,r,n)=>i=>{if((e=>void 0!==e.channelPrefix)(i)){const{arrayBuffer:t,dataView:r}=e(4);return r.setUint8(0,255),r.setUint8(1,32),r.setUint8(2,1),r.setUint8(3,i.channelPrefix),t}if((e=>void 0!==e.channelPressure)(i)){const{arrayBuffer:t,dataView:r}=e(2);return r.setUint8(0,13|15&i.channel),r.setUint8(1,i.channelPressure.pressure),t}if((e=>void 0!==e.controlChange)(i)){const{arrayBuffer:t,dataView:r}=e(3);return r.setUint8(0,176|15&i.channel),r.setUint8(1,i.controlChange.type),r.setUint8(2,i.controlChange.value),t}if((e=>void 0!==e.copyrightNotice)(i))return t(i,2,"copyrightNotice");if((e=>void 0!==e.cuePoint&&void 0===e.metaTypeByte)(i))return t(i,7,"cuePoint");if((e=>void 0!==e.deviceName)(i))return t(i,9,"deviceName");if((e=>void 0!==e.endOfTrack)(i)){const{arrayBuffer:t,dataView:r}=e(3);return r.setUint8(0,255),r.setUint8(1,47),r.setUint8(2,0),t}if((e=>void 0!==e.instrumentName)(i))return t(i,4,"instrumentName");if((e=>void 0!==e.keyPressure)(i)){const{arrayBuffer:t,dataView:r}=e(3);return r.setUint8(0,10|15&i.channel),r.setUint8(1,i.keyPressure.noteNumber),r.setUint8(2,i.keyPressure.pressure),t}if((e=>void 0!==e.keySignature)(i)){const{arrayBuffer:t,dataView:r}=e(5);return r.setUint8(0,255),r.setUint8(1,89),r.setUint8(2,2),r.setUint8(3,i.keySignature.key),r.setUint8(4,i.keySignature.scale),t}if((e=>void 0!==e.lyric)(i))return t(i,5,"lyric");if((e=>void 0!==e.marker)(i))return t(i,6,"marker");if((e=>void 0!==e.midiPort)(i)){const{arrayBuffer:t,dataView:r}=e(4);return r.setUint8(0,255),r.setUint8(1,33),r.setUint8(2,1),r.setUint8(3,i.midiPort),t}if((e=>void 0!==e.noteOff)(i)){const{arrayBuffer:t,dataView:r}=e(3);return r.setUint8(0,128|15&i.channel),r.setUint8(1,i.noteOff.noteNumber),r.setUint8(2,i.noteOff.velocity),t}if((e=>void 0!==e.noteOn)(i)){const{arrayBuffer:t,dataView:r}=e(3);return r.setUint8(0,144|15&i.channel),r.setUint8(1,i.noteOn.noteNumber),r.setUint8(2,i.noteOn.velocity),t}if((e=>void 0!==e.pitchBend)(i)){const{arrayBuffer:t,dataView:r}=e(3);return r.setUint8(0,224|15&i.channel),r.setUint8(1,127&i.pitchBend),r.setUint8(2,i.pitchBend>>7),t}if((e=>void 0!==e.programChange)(i)){const{arrayBuffer:t,dataView:r}=e(2);return r.setUint8(0,192|15&i.channel),r.setUint8(1,i.programChange.programNumber),t}if((e=>void 0!==e.programName)(i))return t(i,8,"programName");if((e=>void 0!==e.sequencerSpecificData)(i)){const{arrayBuffer:t,dataView:s}=e(2);s.setUint8(0,255),s.setUint8(1,127);const a=i.sequencerSpecificData.length/2,o=n(a),{arrayBuffer:f,dataView:c}=e(a);for(let e=0;e<i.sequencerSpecificData.length;e+=2)c.setUint8(e/2,parseInt(i.sequencerSpecificData.slice(e,e+2),16));return r([t,o,f])}if((e=>void 0!==e.setTempo)(i)){const{arrayBuffer:t,dataView:r}=e(6);return r.setUint8(0,255),r.setUint8(1,81),r.setUint8(2,3),r.setUint8(3,i.setTempo.microsecondsPerQuarter>>16),r.setUint8(4,i.setTempo.microsecondsPerQuarter>>8),r.setUint8(5,i.setTempo.microsecondsPerQuarter),t}if((e=>void 0!==e.smpteOffset)(i)){const{arrayBuffer:t,dataView:r}=e(8);let n;if(24===i.smpteOffset.frameRate)n=0;else if(25===i.smpteOffset.frameRate)n=32;else if(29===i.smpteOffset.frameRate)n=64;else{if(30!==i.smpteOffset.frameRate)throw new Error;n=96}return r.setUint8(0,255),r.setUint8(1,84),r.setUint8(2,5),r.setUint8(3,i.smpteOffset.hour|n),r.setUint8(4,i.smpteOffset.minutes),r.setUint8(5,i.smpteOffset.seconds),r.setUint8(6,i.smpteOffset.frame),r.setUint8(7,i.smpteOffset.subFrame),t}if((e=>void 0!==e.sysex)(i)){const{arrayBuffer:t,dataView:s}=e(1);s.setUint8(0,240);const a=i.sysex.length/2,o=n(a),{arrayBuffer:f,dataView:c}=e(a);for(let e=0;e<i.sysex.length;e+=2)c.setUint8(e/2,parseInt(i.sysex.slice(e,e+2),16));return r([t,o,f])}if((e=>void 0!==e.timeSignature)(i)){const{arrayBuffer:t,dataView:r}=e(7);let n=i.timeSignature.denominator,s=0;for(;n>1;)n/=2,s+=1;return r.setUint8(0,255),r.setUint8(1,88),r.setUint8(2,4),r.setUint8(3,i.timeSignature.numerator),r.setUint8(4,s),r.setUint8(5,i.timeSignature.metronome),r.setUint8(6,i.timeSignature.thirtyseconds),t}if((e=>void 0!==e.metaTypeByte)(i))return t(i,parseInt(i.metaTypeByte,16),"text");if((e=>void 0!==e.text&&void 0===e.metaTypeByte)(i))return t(i,1,"text");if((e=>void 0!==e.trackName)(i))return t(i,3,"trackName");throw new Error('Unencodable event with a delta of "'.concat(i.delta,'".'))})(t,((e,t,r,n)=>(i,s,a)=>{const{arrayBuffer:o,dataView:f}=e(2);f.setUint8(0,255),f.setUint8(1,s);const c=r.encode(i[a]).buffer,u=n(c.byteLength);return t([o,u,c])})(t,r,new TextEncoder,n),r,n),s=e=>{const t=e.reduce(((e,t)=>e+t.byteLength),0),{uint8Array:r}=e.reduce(((e,t)=>{let{offset:r,uint8Array:n}=e;return n.set(new Uint8Array(t),r),{offset:r+t.byteLength,uint8Array:n}}),{offset:0,uint8Array:new Uint8Array(t)});return r.buffer},a=t=>{const{arrayBuffer:r,dataView:a}=e(8),o=[r];let f=0;a.setUint32(0,1297379947);for(const e of t){const r=n(e.delta);try{const t=i(e);f+=r.byteLength+t.byteLength,o.push(r,t)}catch(r){if(r.message.match(/Unencodable\\smessage\\swith\\sa\\sdelta\\sof\\s[0-9]+\\./)){const r=t.indexOf(e);throw new Error("Unencodable message at index ".concat(r,"."))}throw r}}return a.setUint32(4,f),s(o)},o=t=>{let{division:r,format:n,tracks:i}=t;const o=[];try{o.push(((t,r,n)=>{const{arrayBuffer:i,dataView:s}=e(14);return s.setUint32(0,1297377380),s.setUint32(4,6),s.setUint16(8,r),s.setUint16(10,n.length),s.setUint16(12,t),i})(r,n,i))}catch(e){throw new Error("The given JSON object seems to be invalid.")}for(const e of i)try{o.push(a(e))}catch(t){if(t.message.match(/Unencodable\\sevent\\sat\\sposition\\s[0-9]+\\./)){const r=i.indexOf(e);throw new Error("".concat(t.message.slice(0,-1)," of the track at index ").concat(r,"."))}throw t}return s(o)};addEventListener("message",(e=>{let{data:t}=e;try{if("encode"!==t.method)throw new Error('The given method "'.concat(t.method,'" is not supported'));{const{id:e,params:{midiFile:r}}=t,n=o(r);postMessage({error:null,id:e,result:{arrayBuffer:n}},[n])}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})();`; // tslint:disable-line:max-line-length
